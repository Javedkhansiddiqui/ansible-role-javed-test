---
- name: "First Play - Socks Tunnel Check"
  hosts: localhost
  connection: local
  gather_facts: true
  roles:
    - role: ansible-role-event-socks-tunnel


- name: "Second Play - This is the example of ansible with python to read excel file data"
  hosts: "{{ windows_share_server }}" #  "{{ linux_jump | default([]) }}"
  gather_facts: true
  vars:
    linux_jump: "csc2cxp21113105.cloud.kp.org"
    windows_share_server: "csc2cwp00012109.cloud.kp.org"
    target_win_server: "csc2cwp00008395.cloud.kp.org"
    account_code: "{{ hostvars['localhost']['account_code'] }}"
    trans_num: "{{ hostvars['localhost']['trans_num'] }}"
    ansible_python_interpreter: "/usr/bin/python"
    inventory_ip: "10.15.164.238"
    inventory_host: "csc2cwp00008395.cloud.kp.org"
    input_share_path: "E:\\Software\\PVSCSI Drivers\\pvscsi\\Win8\\amd64\\"
    # my_win_server_list:
    # [
    #     {
    #       "ip_address": "10.15.164.238",
    #       "win_server": "csc2cwp00008395.cloud.kp.org"
    #     },
    #     {
    #       "ip_address": "10.15.126.66",
    #       "win_server": "csc2cwn21112037.cloud.kp.org"
    #     }
    # ]
    # dest_export_path: "\\\\10.15.164.238\\LOAD_PVSCSI_DRIVERS"
    # dest_export_path: "\\\\10.15.164.238\\VMware Tools"
    # dest_export_path: "\\\\10.15.126.66\\Win8"
  tasks:
    # - name: "Copy folder from windows network share to localhost"
    #   ansible.builtin.fetch:
    #     src: 'E:\\Software\\PVSCSI Drivers\\pvscsi\\Win8\\amd64\\'
    #     dest: "/tmp/"
    #     flat: true
    #   delegate_to: "{{ windows_share_server }}"
    #   vars:
    #     become_user: "{{ lookup('env', 'ANSIBLE_NET_USERNAME') }}"
    #     become: true
    #     ansible_python_interpreter: "/usr/bin/python"
    #     ansible_user: "{{ lookup('env', 'ANSIBLE_NET_USERNAME') }}" # Make Sure you add NET cred to connect windows Server
    #     ansible_password: "{{ lookup('env', 'ANSIBLE_NET_PASSWORD') }}"
    #     account_code: "{{ hostvars['localhost']['account_code'] }}"
    #     trans_num: "{{ hostvars['localhost']['trans_num'] }}"

   
    # - name: "Check Directory On {{ jumpserver_win_server }}://{{ my_folder }}"
    #   ansible.builtin.command: "cat /tmp/test.txt"
    #   register: read_output
    #   delegate_to: localhost
      

    # - name: Copy folder from '{{ windows_share_server }}' => '{{target_win_server}}'
    #   ansible.windows.win_copy:
    #     src: "\\\\10.15.214.205\\Software\\PVSCSI Drivers\\pvscsi\\Win8\\amd64"
    #     dest: "C:\\LOAD_PVSCSI_DRIVERS"
    #     remote_src: true
      # delegate_to: "{{ windows_share_server }}"
      # vars:
        # become_user: "{{ lookup('env', 'ANSIBLE_NET_USERNAME') }}"
        # become: true
        # ansible_python_interpreter: "/usr/bin/python"
        # ansible_user: "{{ lookup('env', 'ANSIBLE_NET_USERNAME') }}" # Make Sure you add NET cred to connect windows Server
        # ansible_password: "{{ lookup('env', 'ANSIBLE_NET_PASSWORD') }}"
        # account_code: "{{ hostvars['localhost']['account_code'] }}"
        # trans_num: "{{ hostvars['localhost']['trans_num'] }}"

      - name: "Set-Fact"
        ansible.builtin.set_fact:
          dest_export_path: "\\\\{{ inventory_ip }}\\Win8"


      - name: "Check Directory"
        ansible.builtin.win_shell: "Test-Path -Path 'C:\\VMware Tools\\Program File\\VMware\\VMware Tools\\Drivers\\pvscsi\\Win8'"
        register: check_path_exist_status
        delegate_to: "{{ inventory_host }}"
        vars:
          become_user: "{{ lookup('env', 'ANSIBLE_NET_USERNAME') }}"
          become: true
          ansible_python_interpreter: "/usr/bin/python"
          ansible_user: "{{ lookup('env', 'ANSIBLE_NET_USERNAME') }}" # Make Sure you add NET cred to connect windows Server
          ansible_password: "{{ lookup('env', 'ANSIBLE_NET_PASSWORD') }}"
          account_code: "{{ hostvars['localhost']['account_code'] }}"
          trans_num: "{{ hostvars['localhost']['trans_num'] }}"


      - name: "Create Directory, If Not Exist"
        ansible.builtin.win_shell: "New-Item -Path 'C:\\VMware Tools\\Program File\\VMware\\VMware Tools\\Drivers\\pvscsi\\Win8' -ItemType Directory"
        register: directory_created_output
        when: check_path_exist_status.stdout_lines[0] == "False"
        delegate_to: "{{ inventory_host }}"
        vars:
          become_user: "{{ lookup('env', 'ANSIBLE_NET_USERNAME') }}"
          become: true
          ansible_python_interpreter: "/usr/bin/python"
          ansible_user: "{{ lookup('env', 'ANSIBLE_NET_USERNAME') }}" # Make Sure you add NET cred to connect windows Server
          ansible_password: "{{ lookup('env', 'ANSIBLE_NET_PASSWORD') }}"
          account_code: "{{ hostvars['localhost']['account_code'] }}"
          trans_num: "{{ hostvars['localhost']['trans_num'] }}"


      - name: "SMB Process"
        ansible.builtin.win_shell: "New-SmbShare -Path 'C:\\VMware Tools\\Program File\\VMware\\VMware Tools\\Drivers\\pvscsi\\Win8' -Name 'Win8'"
        delegate_to: "{{ inventory_host }}"
        ignore_errors: true
        vars:
          become_user: "{{ lookup('env', 'ANSIBLE_NET_USERNAME') }}"
          become: true
          ansible_python_interpreter: "/usr/bin/python"
          ansible_user: "{{ lookup('env', 'ANSIBLE_NET_USERNAME') }}" # Make Sure you add NET cred to connect windows Server
          ansible_password: "{{ lookup('env', 'ANSIBLE_NET_PASSWORD') }}"
          account_code: "{{ hostvars['localhost']['account_code'] }}"
          trans_num: "{{ hostvars['localhost']['trans_num'] }}"

    
      - name: "Copy Process"
        ansible.builtin.win_shell: |
          $pass = ConvertTo-SecureString -AsPlainText '{{ lookup('env', 'ANSIBLE_NET_PASSWORD') }}' -Force
          $Cred = New-Object System.Management.Automation.PSCredential -ArgumentList '{{ lookup('env', 'ANSIBLE_NET_USERNAME') }}',$pass
          New-PSDrive -Name 'X' -Root '{{ dest_export_path }}' -PSProvider FileSystem -Credential $Cred
          copy-item -path "{{ input_share_path }}" -Destination "{{ dest_export_path }}" -Recurse -Force
          Get-PSDrive X | Remove-PSDrive
        # no_log: true
        register: copy_output_genf


      # - name: "Run The SMB Share Line"
      #   ansible.builtin.win_shell: |

      #     foreach ($datastore in $all_datastores)
      #     {
      #       $datastoreObject = Get-Datastore -Name $datastore -ErrorAction SilentlyContinue
      #       if ($datastoreObject -ne $null)
      #       {
      #           $output = "$datastore,0"
      #           Write-Host $output -ForegroundColor Green
      #       }
      #       else
      #       {
      #           $output = "$datastore,1"
      #           Write-Host $output -ForegroundColor Red
      #       }
      #       Add-Content -Path $outputFile -Value $output
      #     }
      #     Write-Host "`n"
      #     Write-Host "Output has been stored in :- '$outputFile'."
      #     Disconnect-VIServer -Confirm:$false
      #   register: datastore_output